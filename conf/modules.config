/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    
    withLabel: venv {
        container = "quay.io/microbiome-informatics/mgnifams:2.0.0"
    }

    withName: 'PIGZ_UNCOMPRESS' {
        publishDir = [
            path: { "${params.outdir}/setup_clusters" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BZ2_UNCOMPRESS' {
        publishDir = [
            path: { "${params.outdir}/setup_clusters" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'EXTRACT_UNANNOTATED_SLICES' {
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/setup_clusters/unannotated_chunks" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MMSEQS_CREATEDB' {
        publishDir = [
            path: { "${params.outdir}/setup_clusters/mmseqs" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MMSEQS_LINCLUST' {
        ext.args = [
            "--min-seq-id ${params.linclust_seq_identity}",
            "-c ${params.linclust_coverage}",
            "--cov-mode ${params.linclust_cov_mode}",
            "--remove-tmp-files 1 -v 0"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/setup_clusters/mmseqs" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MMSEQS_CREATETSV' {
        publishDir = [
            path: { "${params.outdir}/setup_clusters/mmseqs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CALCULATE_CLUSTER_DISTRIBUTION'{
        publishDir = [
            path: { "${params.outdir}/setup_clusters" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'EXTRACT_UNIQUE_CLUSTER_REPS'{
        publishDir = [
            path: { "${params.outdir}/setup_clusters" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CHUNK_CLUSTERS' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/setup_clusters/chunks" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'REFINE_FAMILIES_PARALLEL' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/families/${meta.id}/" },
            mode: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'EXTRACT_FIRST_STOCKHOLM_SEQUENCES' {
        publishDir = [
            path: { "${params.outdir}/family_reps/pre_non_redundant/${meta.id}/" },
            mode: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DEEPTMHMM' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/transmembrane/${meta.id}/" },
            mode: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FLAG_TM' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/transmembrane/${meta.id}/" },
            mode: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ESMFOLD' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/esmfold/${meta.id}/" },
            mode: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: 'EXTRACT_ESMFOLD_SCORES' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/esmfold/scores/${meta.id}/" },
            mode: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PARSE_CIF' {
        ext.prefix = { "${meta.id}_${meta.chunk}" }
        tag = { "${meta.id}_${meta.chunk}" }
        publishDir = [
            path: { "${params.outdir}/structures/cif/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: 'FIND_ANNOTATED_FAMILIES_BY_STRUCTURE' {
        publishDir = [
            path: { "${params.outdir}/structures/foldseek/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: 'EXPORT_MGNIFAMS_CSV' {
        publishDir = [
            path: { "${params.outdir}/post-processing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUERY_MGNPROTEIN_DB' {
        publishDir = [
            path: { "${params.outdir}/post-processing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PARSE_BIOMES' {
        publishDir = [
            path: { "${params.outdir}/post-processing/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PARSE_DOMAINS' {
        publishDir = [
            path: { "${params.outdir}/post-processing/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: HHSUITE_HHBLITS { 
        ext.args = '-z 1000'
    }

    withName: REMOVE_REDUNDANT_AND_TM { 
        publishDir = [
            path: { "${params.outdir}/redundancy" },
            mode: params.publish_dir_mode
        ]
    }

    withName: POOL_FAMILY_RESULTS  { 
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode
        ]
    }
    
    withName: TRANSLATE_MSA_MGYPS {
        publishDir = [
            path: { "${params.outdir}/families" },
            mode: params.publish_dir_mode
        ]
    }

    withName: FILTER_HH_RESULTS {
        publishDir = [
            path: { "${params.outdir}/hh" },
            mode: params.publish_dir_mode
        ]
    }

    withName: FOLDSEEK_EASYSEARCH {
        ext.args = '-e 0.001'
    }

    withName: 'APPEND_SQLITE_BLOBS' {
        publishDir = [
            path: { "${params.outdir}/database/update/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'INITIALISE_SQLITE' {
        publishDir = [
            path: { "${params.outdir}/database/init/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
}
